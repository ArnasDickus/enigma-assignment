{"version":3,"sources":["components/CustomNavbar.jsx","components/Home.jsx","components/Register.jsx","components/Login.jsx","components/DisplayList.jsx","components/Display.jsx","App.jsx","serviceWorker.js","index.js"],"names":["CustomNavbar","react_default","a","createElement","Navbar","expand","Container","Brand","href","Toggle","aria-controls","Collapse","id","className","Nav","Item","lib","to","Link","eventkey","Component","Home","target","rel","Register","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loginAuthentication","state","email","password","alert","data","JSON","parse","localStorage","getItem","length","index","handleEmailChange","event","setState","value","handlePasswordChange","handleSubmit","preventDefault","storeData","localStorageArray","push","setItem","stringify","bind","assertThisInitialized","Form","Group","controlId","Label","Control","autoComplete","required","name","onChange","type","placeholder","Text","Button","onClick","variant","Login","login","defineProperty","isSuccessful","_this2","DisplayList","_Component","show","handleDelete","handleShow","handleClose","handleEdit","inherits","createClass","key","map","objectSpread","updateList","concat","toConsumableArray","slice","_this3","Modal","onHide","Header","closeButton","Title","Body","Footer","Display","displayValues","data1","DisplayList_DisplayList","App","Data","HashRouter","src_components_CustomNavbar","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6ed6d5a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {Navbar, Nav, Container} from 'react-bootstrap';\r\nimport './CustomNavbar.css';\r\nimport {LinkContainer} from 'react-router-bootstrap';\r\n\r\nclass CustomNavbar extends Component {\r\n  render() {\r\n    return (\r\n      \r\n      <Navbar expand = \"lg\">\r\n        <Container>\r\n          <Navbar.Brand href = \"./\">Enigma Assignment</Navbar.Brand>\r\n            <Navbar.Toggle  aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\r\n                  <Nav >\r\n                    <Nav.Item >\r\n                      <LinkContainer  to = \"./\">\r\n                      <Nav.Link eventkey = {1}   >Home</Nav.Link>\r\n                      </LinkContainer>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                      <LinkContainer to = \"./Register\" >\r\n                      <Nav.Link eventkey = {2}    >Register</Nav.Link> \r\n                      </LinkContainer> \r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                      <LinkContainer to = \"./Login\">\r\n                      <Nav.Link eventkey = {3}    >Login</Nav.Link> \r\n                      </LinkContainer>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                      <LinkContainer to = \"./Display\">\r\n                      <Nav.Link eventkey = {4}    >Display</Nav.Link> \r\n                      </LinkContainer>\r\n                    </Nav.Item>\r\n                  </Nav>\r\n            </Navbar.Collapse>\r\n          </Container>\r\n      </Navbar>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CustomNavbar;","import React, { Component } from 'react'\r\nimport {Container} from \"react-bootstrap\";\r\n\r\n\r\n\r\n\r\nclass Home extends Component {\r\nrender() {\r\n    return (\r\n        <Container className = \"mt-3\">\r\n           <h2>Home</h2>\r\n           <p>Front-end project 4 page application created with React.</p>\r\n           <ul className = \"list-group\">\r\n               <li className = \"list-group-item\"><strong>Register:</strong> Allows you to register stores info into local storage</li>\r\n               <li className = \"list-group-item\"><strong>Login:</strong> Checks if you email and password is registered </li>\r\n               <li className = \"list-group-item\"><strong>Display:</strong> Display all items, also allows to edit and delete items</li>\r\n                <li className = \"list-group-item\"><strong>Bonus:</strong> Added login validation. won't register empty users, and won't allow to have the same email</li>\r\n           </ul>\r\n           <a className=\"badge badge-primary mt-2\" href=\"https://github.com/ArnasDickus/enigma-assignment\" target = \"_blank\" rel = 'noopener noreferrer'>Github</a>\r\n        </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react'\r\nimport { Container, Form, Button } from 'react-bootstrap';\r\n\r\nclass Register extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      email: '',\r\n      password: '',\r\n    }\r\n\r\n    // This binding is necessary to make `this` work in the callback \r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.storeData = this.storeData.bind(this);\r\n    this.handleEmailChange = this.handleEmailChange.bind(this);\r\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n    this.loginAuthentication = this.loginAuthentication.bind(this);\r\n\r\n  }\r\n\r\n  loginAuthentication = () => {\r\n\r\n    if(!this.state.email || !this.state.password){\r\n      alert('Please fill in the form');\r\n      return false;\r\n    }\r\n    \r\n   let data = JSON.parse(localStorage.getItem('data'));\r\n\r\n      if(localStorage.length === 0){\r\n        return true;\r\n      }else{\r\n        for (let index = 0; index < data.length; index++) {\r\n          if(this.state.email === data[index].email){\r\n             alert('This Email already exist');\r\n              return false\r\n          }\r\n        }\r\n      }\r\n    return true;\r\n  }\r\n  handleEmailChange = (event) =>{\r\n    this.setState({\r\n      email: event.target.value,\r\n    })\r\n  }\r\n  handlePasswordChange = (event) => {\r\n    this.setState({\r\n      password: event.target.value,\r\n    })\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if(this.loginAuthentication()){\r\n      this.storeData();\r\n    }\r\n    \r\n\r\n    // Reset form;\r\n    this.setState({\r\n      email: '',\r\n      password: '',\r\n    })\r\n  }\r\n\r\n  storeData = () => {\r\n\r\n\r\n    // Get that item from local storage.\r\n    if(localStorage.getItem(\"data\") === null){\r\n            let localStorageArray = [];\r\n            localStorageArray.push(this.state);\r\n            localStorage.setItem('data', JSON.stringify(localStorageArray));\r\n    }else{\r\n        let localStorageArray = JSON.parse(localStorage.getItem(\"data\"));\r\n        localStorageArray.push(this.state);\r\n        localStorage.setItem(\"data\", JSON.stringify(localStorageArray));\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n    <Container className = \"mt-3\" >\r\n      <h2>Registration Form</h2>\r\n        <Form >\r\n          <Form.Group controlId=\"formBasicEmail\">\r\n            <Form.Label>Email address</Form.Label>\r\n             <Form.Control \r\n            autoComplete=\"email\" required\r\n            name = \"email\"\r\n            value = {this.state.email} \r\n            onChange = {this.handleEmailChange}\r\n            type=\"email\" \r\n            placeholder=\"Enter email\" />\r\n            <Form.Text className=\"text-muted\">\r\n              We'll never share your email with anyone else.\r\n            </Form.Text>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"formBasicPassword\">\r\n            <Form.Label>Password</Form.Label>\r\n             <Form.Control \r\n             autoComplete=\"password\" required\r\n             name = \"password\"\r\n             value = {this.state.password} \r\n            onChange = {this.handlePasswordChange}\r\n            type=\"password\" \r\n            placeholder=\"Password\" /> \r\n          </Form.Group>\r\n          <Button onClick = {this.handleSubmit} variant=\"primary\" type=\"submit\">\r\n            Submit\r\n          </Button>\r\n          </Form>\r\n    </Container>  \r\n    )\r\n  }\r\n}\r\n\r\nexport default Register;","import React, { Component } from 'react'\r\nimport { Container, Form, Button } from 'react-bootstrap';\r\n\r\nclass Login extends Component {\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n    email: '',\r\n    password: '',\r\n  }\r\n// Methods\r\n  this.onChange = this.onChange.bind(this);\r\n  this.handleSubmit = this.handleSubmit.bind(this);\r\n  this.login = this.login.bind(this);\r\n\r\n  }\r\n  onChange(event){\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    })\r\n  };\r\n\r\n  handleSubmit(event){\r\n    event.preventDefault();\r\n    this.login();\r\n\r\n    // Reset form\r\n    this.setState({\r\n      email: '',\r\n      password: ''\r\n    });\r\n\r\n  }\r\n  login(){\r\n    const data = JSON.parse(localStorage.getItem('data'));\r\n    let isSuccessful = false;\r\n\r\n    for (let index = 0; index < data.length; index++) {\r\n      if(this.state.email === data[index].email &&\r\n       this.state.password === data[index].password){\r\n          isSuccessful = true;\r\n          break;\r\n      }\r\n    }\r\n    if(isSuccessful){\r\n      alert('login Success');\r\n    }else{\r\n      alert('login failed');\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n        <Container className = \"mt-3\">\r\n            <h2>Login Form</h2>\r\n          <Form>\r\n            <Form.Group controlId=\"formBasicEmail\">\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control \r\n              autoComplete=\"email\" required\r\n              name = \"email\"\r\n              type=\"email\" \r\n              placeholder=\"Enter email\"\r\n              value = {this.state.email}\r\n              onChange = {event => this.onChange(event)}\r\n               />\r\n              <Form.Text className=\"text-muted\">\r\n                We'll never share your email with anyone else.\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formBasicPassword\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control \r\n              autoComplete=\"email\" required\r\n              name = \"password\"\r\n              type=\"password\" \r\n              placeholder=\"Password\"\r\n              value = {this.state.password}\r\n              onChange = {event => this.onChange(event)}\r\n               />\r\n            </Form.Group>\r\n            <Button onClick = {this.handleSubmit} variant=\"primary\" type=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </Container>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react'\r\nimport {Button, Modal, Form} from 'react-bootstrap';\r\n\r\n\r\nexport class DisplayList extends Component {\r\n    \r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            show: false,\r\n        };\r\n\r\n        // Methods\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        // Edit Modal\r\n        this.handleShow = this.handleShow.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.handleEdit = this.handleEdit.bind(this);\r\n\r\n        // loginAuthentication\r\n        this.loginAuthentication = this.loginAuthentication.bind(this);\r\n    }\r\n\r\n    loginAuthentication(){\r\n\r\n      if(!this.state.email || !this.state.password){\r\n        alert(`Please fill in the form`);\r\n        return false;\r\n      }\r\n       let data = JSON.parse(localStorage.getItem('data'));\r\n        for (let index = 0; index < data.length; index++) {\r\n          if(this.state.email === data[index].email){\r\n            alert('This Email already exist');\r\n            return false;\r\n          } \r\n        }\r\n      return true;\r\n    }\r\n    onChange(event){\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    };\r\n    handleClose(){\r\n        this.setState({show: false});\r\n    }\r\n    handleShow(){\r\n        this.setState({show: true});\r\n    }\r\n    handleEdit(event){\r\n        event.preventDefault();\r\n        if(this.loginAuthentication()){\r\n          this.setState({show: false});\r\n          let data = JSON.parse(localStorage.getItem('data'));\r\n\r\n          data = data.map((value) => {\r\n            if(value.email === this.props.email && \r\n              value.password === this.props.password){\r\n\r\n                return {\r\n                  ...value,\r\n                  email: this.state.email,\r\n                  password: this.state.password,\r\n                }\r\n              \r\n            }\r\n            return value;\r\n          })\r\n          localStorage.setItem('data', JSON.stringify(data));\r\n          this.props.updateList(data);\r\n        }\r\n        \r\n    }\r\n\r\n    handleDelete(){\r\n        let data = JSON.parse(localStorage.getItem('data'));\r\n        for (let index = 0; index < data.length; index++) {\r\n            if(this.props.email === data[index].email &&\r\n                this.props.password === data[index].password){\r\n                data = [\r\n                  ...data.slice(0, index),\r\n                  ...data.slice(index + 1)\r\n                ];\r\n            }\r\n        }\r\n        localStorage.setItem('data', JSON.stringify(data));\r\n        this.props.updateList(data);\r\n    }\r\n\r\n\r\n  render() {\r\n    return (\r\n    <div className = \"mt-4\">\r\n        <li className=\"list-group-item text-justify\">\r\n            Email: {this.props.email} \r\n            <br /> \r\n            Password: {this.props.password}\r\n            <br /> \r\n            <Button onClick = {this.handleShow} variant = \"info mr-4 mt-1\">Edit</Button>\r\n            <Button onClick = {this.handleDelete} variant = \"danger mt-1\">Delete</Button>\r\n        </li>\r\n        <Modal show={this.state.show} onHide={this.handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Edit Form</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form>\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                <Form.Label>Email address</Form.Label>\r\n                <Form.Control \r\n                autoComplete=\"email\" required\r\n                name = \"email\"\r\n                type=\"email\" \r\n                placeholder=\"Enter email\"\r\n                value = {this.state.email}\r\n                onChange = {event => this.onChange(event)}\r\n                />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"formBasicPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control \r\n                autoComplete=\"email\" required\r\n                name = \"password\"\r\n                type=\"password\" \r\n                placeholder=\"Password\"\r\n                value = {this.state.password}\r\n                onChange = {event => this.onChange(event)}\r\n                />\r\n                </Form.Group>\r\n          </Form>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={this.handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={this.handleEdit}>\r\n              Save Changes\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport { Container } from 'react-bootstrap';\r\nimport {DisplayList} from './DisplayList';\r\n\r\n\r\nclass Display extends Component {\r\n  constructor(props){\r\n    let data = JSON.parse(localStorage.getItem('data'));\r\n    super(props)\r\n    this.state = {\r\n      data: data,\r\n  }\r\n\r\n  // Methods\r\n  this.displayValues = this.displayValues.bind(this);\r\n  }\r\n  \r\n  displayValues(){\r\n     if(localStorage.length === 0){\r\n       return false;\r\n     }else{\r\n        return this.state.data.map((data1, index) =>\r\n        <DisplayList\r\n          key = {index}\r\n          email = {data1.email}\r\n          password = {data1.password}\r\n          updateList = {this.updateList}\r\n          /> \r\n        )\r\n     }\r\n    \r\n    \r\n  }\r\n  // This is the method that will be called from the child component.\r\n  updateList = (data) => {\r\n    this.setState({\r\n      data\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      \r\n    <Container className = \"mt-3\">\r\n      <h2>Display</h2>\r\n      <ul className=\"list-group\">\r\n        {this.displayValues()}\r\n      </ul>\r\n    </Container>\r\n    )\r\n    \r\n  }\r\n}\r\n\r\nexport default Display;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport {HashRouter as Router, Route}  from 'react-router-dom';\r\n\r\n\r\nimport CustomNavbar from \"./components/CustomNavbar\";\r\n\r\nimport Home from \"./components/Home\";\r\nimport Register from \"./components/Register\";\r\nimport Login from \"./components/Login\";\r\nimport Display from \"./components/Display\";\r\n\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      Data: {\r\n        email: '',\r\n        password: '',\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n    <Router>\r\n      <div>\r\n        <CustomNavbar />\r\n        <Route exact path = '/' component = {Home} />\r\n        <Route path = '/register' component = {Register} />\r\n        <Route path = '/login' component = {Login} />\r\n        <Route path = '/display' component = {Display} />\r\n        \r\n      </div>\r\n    </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n\r\n   /*\r\n-------------------------------------------------------------------------------------------------------------------------------------------\r\n   Problem that my data is getting overwritten. I need to check it.\r\n   Create a object data where you could put state\r\n\r\n   REGISTER FORM\r\n   1) Check out stack overflow answer DONE\r\n   2) I did my example. didn't worked DONE\r\n   3) Watch tutorial about local storage https://hackernoon.com/how-to-take-advantage-of-local-storage-in-your-react-projects-a895f2b2d3f2 Not relevant saves only one value\r\n   4) Watch second tutorial https://alligator.io/js/introduction-localstorage-sessionstorage/\r\n   5) Writing stack overflow question I was able to figure it out. Turns out My logic webhelper logic worked.\r\n\r\n    LOGIN FORM\r\n    1) Add some margin-top DONE \r\n    2) Take inputs from login form DONE\r\n    3) Compare inputs to local storage data simple for if statement \r\n      for localstorage length\r\n      Compare this.state email and password with local storage email password\r\n   4) Looping through if first element is not right i get login failed and then login sucess.\r\n   5) I asked on Stack Overflow time to go to other side.  I got the answer\r\n\r\n   DISPLAY\r\n   1) Display values somehow. Check tutorial Watch tutorial about local storage https://hackernoon.com/how-to-take-advantage-of-local-storage-in-your-react-projects-a895f2b2d3f2 Not relevant saves only one value\r\n   2) Display values somehow. Check this tutorial https://stackoverflow.com/questions/43668808/render-data-from-localstorage-with-react https://gist.github.com/idjuradj/575ba66981cccbfae23486cc3e047fac Suceeded finally\r\n   3) Stylize buttons. DONE\r\n   4) If I click button Delete delete Item\r\n      4.1) Problem is my DisplayList component is stateless. I need to convert it \r\n      with classes. So that I could use states for it. Success\r\n      4.2) Select button delete. Done\r\n      4.3) Select data from local storage. Compare it with current data and delete it. Done\r\n      4.4) Delete button. data.splice(index, 1) It works, but I need to refresh to see effect. DONE\r\n      4.5) Delete button that effect would be immediate. 1) Tried this.state = {data: data} and setState but didn't worked\r\n      4.6) Couldn't figure it out. Asked on stackOverflow. Found answer thanks stack overflow  https://stackoverflow.com/questions/54805428/re-render-react-component-after-i-deleted-from-local-storage/54805729#54805729\r\n      4.7) BUG Itterator is not working. Selecting and deleting first element instead of selected. Thanks Stackoverflow https://stackoverflow.com/questions/54809828/how-to-delete-selected-element-react/54809872#54809872\r\n   5) If I click button Edit Modal appears. Allows me to input data, and save it.    \r\n      5.1) If I click on Edit show modal. DONE https://react-bootstrap.github.io/components/modal/\r\n      5.2) Create Form inputs where you could input data. DONE\r\n      5.3) Compare local storage data with current data.\r\n         We have 3 values:\r\n          Local storage values. Have access to it.\r\n          Edited values: have access to it no problem.\r\n          Current values: no access.\r\n          If I click edit. and save changes how to know which local storage\r\n          value to change.\r\n      5.4) I was able to change email and password But I run into 2 problems\r\n         1) Edit button changes only first element instead of selected element.\r\n         2) this.state also adds show: true which it shouldn't do. Slice properties https://medium.freecodecamp.org/lets-clear-up-the-confusion-around-the-slice-splice-split-methods-in-javascript-8ba3266c29ae\r\n         3) Unable to edit button.\r\n         4) Got answer from stack overflow. But it dosen't work as expected. https://stackoverflow.com/questions/54814129/how-to-edit-local-storage-values-react?noredirect=1#comment96406771_54814129\r\n   6) Added verification for Register. DONE\r\n   7) Opening Display with 0 local storage items crash display. Fixed.\r\n   8) In display add verification. 7\r\n      8.1) Won't allow change to blank.\r\n      8.2) Won't allow to name the same way it already exist.\r\n\r\n\r\n\r\n-------------------------------------------------------------------------------------------------------------------------------------------\r\n  */"],"sourceRoot":""}